#searching challenge
import numpy as np

def SearchingChallenge(strParam):
# Initialize variables to hold the sum of digits and count of letters
sum_digits = 0
letter_count = 0

# Iterate through each character in the string
for char in strParam:
    if char.isdigit():  # If the character is a digit, add to sum_digits
        sum_digits += int(char)
    elif char.isalpha():  # If the character is a letter, increment letter_count
        letter_count += 1

# Handle cases where there are no letters to avoid division by zero
if letter_count == 0:
    return 0

# Calculate the result (sum of numbers divided by the number of letters)
result = sum_digits / letter_count

# Return the rounded result using numpy
return int(np.round(result))
keep this function call here
print(SearchingChallenge("Hello6 9World 2, Nic8e D7ay!")) # Expected Output: 2

#Code to Create Tables
CREATE TABLE MovieCatalog
(Movie_Id CHAR(8) PRIMARY KEY,
Title VARCHAR(150) CONSTRAINT TitleRequired NOT NULL
Genre VARCHAR(150) CONSTRAINT TitleRequired NOT NULL);

#Employee Table Analysis
SELECT emp.Position AS Position,
 emp.FirstName AS FirstName,
 emp.LastName AS LastName,
 mgr.Position AS ReportsToPosition
FROM maintable_A1GUR emp
JOIN maintable_A1GUR mgr
ON emp.ReportsTo = mgr.EmployeeID
WHERE emp.ReportsTo IS NOT NULL
ORDER BY mgr.Position ASC,
         emp.Position ASC;
*didn't work 
SELECT 
    e.Position,
    e.FirstName,
    e.LastName,
    m.Position AS ReportsToPosition
FROM 
    Employees e
JOIN 
    Employees m ON e.ReportsTo = m.EmployeeID

ORDER BY 
    m.Position          -- Order by the Position of the person they report to
    e.Position ;         -- Then by the individual's Position in ascending order
*worked
